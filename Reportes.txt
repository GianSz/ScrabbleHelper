ORDENAR EL DICCIONARIO

Primero analizamos el ordenamiento del diccionario como un arreglo estático. Así fue nuestro código:

public class Diccionario{

	String[] palabras;

	//Método para crear diccionarios segun el las palabras que se quieran meter en el diccionario.
	public Diccionario(String[] p){
		this.palabras = p;
	}

	//Método para ordenar el diccionario
	public void ordenarDiccionario(){	
		for(int i = 0; i < this.palabras.length - 1; i++){
			for(int j = i+1; j < this.palabras.length; j++){
				if(this.palabras[i].compareToIgnoreCase(this.palabras[j]) > 0){
					String temp = this.palabras[i];
					this.palabras[i] = this.palabras[j];
					this.palabras[j] = temp;
				}
			}
		}
	}

	public void mostrarDiccionario(){
		for(int i = 0; i<this.palabras.length; i++){
			System.out.println(this.palabras[i]);
		}
	}

}

Después, vimos que el diccionario era un arreglo dinámico entonces cambiamos el método ordenarDiccionario y mostrarDiccionario para poder confirmar que lo que estabamos haciendo si estuviera funcionando. 

public void ordenarDiccionario(){
	for(int i = 0; i < this.diccionario.size() - 1; i++){
		for(int j = i+1; j < this.diccionario.size(); j++){
			if(this.diccionario.get(i).compareToIgnoreCase(this.diccionario.get(j)) > 0){
				this.diccionario.set(i, this.diccionario.get(j)); 
         this.diccionario.set(j, this.diccionario.get(i));
			}
		}
	}
}

funcionalidad verificada con el siguiente metodo:

public void mostrarDiccionario(){
	for(int i = 0; i<this.diccionario.size(); i++){
		System.out.println(this.diccionario.get(i));
	}
}

que arrojó el diccionario brindado en el siguiente orden:

arbol
arbol
arbol
arbol
arbol
arbol
arbol
arbol
arbol
arbol
arbol
avión
carro

Allí nos dimos cuenta que en el método de ordenarDiccionario nos faltaba la variable temporal pues se estaba borrando lo que estaba en la posición i, entonces al final quedó así el ordenamiento: 

public void ordenarDiccionario(){
	for(int i = 0; i < this.diccionario.size() - 1; i++){
		for(int j = i+1; j < this.diccionario.size(); j++){
			if(this.diccionario.get(i).compareToIgnoreCase(this.diccionario.get(j)) > 0){
        String temp = this.diccionario.get(i);
				this.diccionario.set(i, this.diccionario.get(j));
	      this.diccionario.set(j, temp);
			}
		}
	}
}

Que con ayuda del metodo mostrarDiccionario() esta vez lo arrojó correctamente 

arbol
as
asa
avión
carro
casa
familia
gato
mama
niño
papa
perro
planta

Ya con el ordenamiento listo empezamos a analizar la búsqueda binaria:

BÚSQUEDA BINARIA

Necesitamos una variable de inicio que vendría siendo la primera poscicion del subarreglo, una final que vendría siendo la ultima pocision del subarreglo y por último una pocisión actual que vendría siendo la poscición de la mitad de nuestro subarreglo.

Usando el método equals() sabremos si la la palabra que se busca es igual a la del arreglo en la "posición actual" y retorne true, sino con el metodo compareTo() definimos que si este nos arroja un número negativo la palabra buscada deberá ir antes (respecto a la palabra de la posición actual en el diccionario ya ordenado) y en caso contrario deberá ir despues. 

Si va antes entonces revisambos un subarreglo que va desde el inicio hasta antes de la mitad del arreglo original (final = posicion actual - 1) o en caso de ir despues el subarreglo va desde despues de la mitad (inicio = posicion actual +1) hasta el final del arreglo. Dicho análisis se repite hasta agotar las posibilidades teniendo en cuenta el análisis lexicográfico y en caso de que no se halle simplemente retorne false.

AGREGAR EL PUNTAJE

Para asignarle el puntaje a las palabras pensamos en hacer un switch en la clase LetterCombination. El switch va a revisar cada caracter de las palabras en el array palabrasASugerir y cada caso va a ser cada letra y se le va a sumar su respectivo puntaje a la variable puntos.

Para facilitar el posterior ordenamiento creamos una clase Puntaje que crea objetos con palabras y puntos, la palabra se toma del string que está siendo evaluado en el momento y los puntos de la variable descrita anteriormente.

se presntaron problemas con palabras cómo carro, donde su puntaje no se mostraba correctamente:

' carro ' -> su puntaje es: 6

y el código era el siguiente:

case 'r': 
if(j++ != (palabrasASugerir.get(i).length()-1)){
 	if(palabrasASugerir.get(i).charAt((j+1)) == 'r'){
		puntos += 8;
		j++;
		break;
	}else{
		puntos += 1;
		break;
	}
}else{
	puntos += 1;
 	break;
}

el problema se ncontraba en que al comparar el operador j++ , la variable en sí cambiaba, por lo que no llegaba a sr igual para el siguiente condicional, corrigiendo este error el código quedó así:

case 'r': 
if((j+1) != (palabrasASugerir.get(i).length()-1)){
 	if(palabrasASugerir.get(i).charAt((j+1)) == 'r'){
		puntos += 8;
		j++;
		break;
	}else{
		puntos += 1;
		break;
	}
}else{
	puntos += 1;
 	break;
}

caso para el que funcionaba adecuadamente:

' carro ' -> su puntaje es: 13

este caso permitió corrgir el mismo error para los casos de 'ch' y 'll'
----------------------------------------------------------------------------


Situación de las tildes
	debemos tener en cunta que el diccionario puede traer palabras con tildes
	para asegurarnos de que si salgan las posibilidades:

	prguntar en el leerDiccionario (justo antes de añadir a "s" al diccionario) si s.contains('á'||'é'||'í'||'ó'||'ú'||'ü')

	en caso de que sí, crear un metodo en diccionario que se llame palabraSinEspecial(String s)

	que pregunte (puede ser con if anidados) si s.contains('á'),s.contains('é'),s.contains('í'),s.contains('ó'),s.contains('ú'),s.contains('ü')... y dependiendo de la que tenga que se haga un replace(letraConEspecial,letra)... y que el metodo retorne este nuevo string


Solución:
Se ha agregado de las lineas 35 a la 40 de la clase Scrabble, un trozo de código que servirá para quitar las tildes
de las palabras encontradas. Esto se hace a través del método de la clase String llamado replaceAll, 
lo que hacemos en estas lineas de código es reemplazar las tildes de cada vocal por esta misma vocal 
pero sin tilde. Si no hay tildes pues no se reemplazará debido a que este método no va a encontrar dicho 
caractér en el String a modificar.

-----------------------------------------------------------------------------
	
CONTROL PARA NO USAR LAS PALABRAS DEL TABLERO

crear una clase tablero que tiene como atributo un arraylist de strings llamado palabrasEnTablero

instanciarlo en Scrabble.java

cuando se esté ejecutando el metodo receiveString() luego de preguntar "si  está en el diccionario", preguntar "si NO está en palabrasEnTablero", siga prguntando si está en palabrasValidadas, sino que no haga nada, el programa simplemente seguirá.


Solución:
Crear un método anadirAlTablero que recibe por parametro la combinación de letras lc y accede a su lista de puntajes pidiendo qué palabra se va a añadir y tomando esta posición se accede al atributo palabra del objeto puntaje y se añade esta a la lista de palabrasEnTablero. 

En el método receiveString se añadio el control de que la palabra solo se añade a palabrasValidadas en caso de que no este en este mismo ni en palabrasEnTablero, evitando repeticiones.

También hicimos un try y un catch para verificar que si el usuario pone una carácter diferente a un número o si pone un número mayor a las opciones que salen entonces sale una frase que dice "Has ingresado una opción errónea" y vuelve a llamar el método de anadirAlTablero para que el usuario escoja una opción correcta. 

---------------------------------------------------------
EJECUCIÓN CONSTANTE

Para permitir que el usuario pueda repetir el proceso se añadio un ciclo do while en el que se permanece hasta que a la pregunta "¿Quieres seguir?" se responda con 2 (no). Al principio teníamos la creación de lc afuera del do while por lo que cuando se volvía a hacer la operación salían las palabras repetidas, así:

Lei 37 palabras

Escriba las letras que tiene en su mano sin espacios

asca

Estas son tus mejores opciones:

1. ' saca ' -> su puntaje es: 6
2. ' casa ' -> su puntaje es: 6
3. ' asa ' -> su puntaje es: 3
4. ' as ' -> su puntaje es: 2

Escoge la opción de la palabra que quieres añadir al tablero: 1
saca
¿Quieres seguir?

1. SÍ
2. NO

Ingrese el número de la opción deseada: 1

Escriba las letras que tiene en su mano sin espacios

asca

Estas son tus mejores opciones:

1. ' saca ' -> su puntaje es: 6
2. ' casa ' -> su puntaje es: 6
3. ' saca ' -> su puntaje es: 6
4. ' casa ' -> su puntaje es: 6
5. ' asa ' -> su puntaje es: 3
6. ' asa ' -> su puntaje es: 3
7. ' as ' -> su puntaje es: 2
8. ' as ' -> su puntaje es: 2


Entonces, lo que hicimos para solucionar esto fue crear lc dentro del do while para que cada vez que se repitiera la operación empezara de 0.

Además hicimos otro ciclo while para verificar que el usuario si escoja o 1 o 2 en la pregunta de "¿Quieres seguir?". 
----------------------------------------------------------------------
CASO "NO PALABRAS FORMADAS"

en un principio si no se formaban palabras con las letras en la mano el programa no paraba de arrojar errores, por lo que se debió crear un control en la clase principal, donde se preguntaba si la lista de validadas sí tenía datos, y en el caso de que no, simplemente arroja un anuncio de que no se formaron palabras y seguía con su normal funcionamiento.